import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import axios from "axios";

// üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô context
interface AdminUser {
  admin_id: number;
  admin_name: string;
  admin_lastname: string;
  admin_phone: string;
  admin_email: string;
  admin_user: string;
  admin_position: string;
  admin_img: string;
}

// üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡∏Ç‡∏≠‡∏á context
interface AuthContextType {
  user: AdminUser | null;
  login: (username: string, password: string) => Promise<{ success: boolean; message: string }>;
  logout: () => void;
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô `undefined`
const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<AdminUser | null>(null);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  const login = async (username: string, password: string) => {
    try {
      const res = await axios.post("/api/admin/login", { username, password });
      if (res.data.success) {
        setUser(res.data.user); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
        localStorage.setItem("user", JSON.stringify(res.data.user)); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
      }
      return res.data;
    } catch (error) {
      console.error("Login error:", error);
      return { success: false, message: "Login failed" };
    }
  };

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î user ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  const logout = () => {
    setUser(null);
    localStorage.removeItem("user");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>  {/* ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ value */}
      {children}
    </AuthContext.Provider>
  );
}

// ‚úÖ ‡πÉ‡∏ä‡πâ Hook `useAuth()` ‡πÉ‡∏ô component ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô AuthProvider");
  }
  return context;
}
